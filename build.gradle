description = 'hub content feed'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
                'org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE',
        )
    }
}

jar {
    baseName = 'hub-content-feed'
    version =  '0.0.1'
}

sourceSets {
    functionaltest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        groovy {
            srcDir 'src/functionaltest'
        }
        resources.srcDir file('src/functionaltest/resources')
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')

    compile 'ch.qos.logback:logback-core:1.1.7'

    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'

    compile 'org.postgresql:postgresql:9.4.1208'
    compile 'com.jayway.jsonpath:json-path:2.1.0'

    compile 'org.apache.velocity:velocity:1.6.2'

    compileOnly 'org.projectlombok:lombok:1.16.10'

    testCompile 'junit:junit:4.12'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.7'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework:spring-test:4.3.5.RELEASE'
}

task functionaltest(type: Test) {
    systemProperties = System.properties
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = 'full'
    }
    testClassesDir = sourceSets.functionaltest.output.classesDir
    classpath = sourceSets.functionaltest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = 'full'
    }
}

bootRun {
    systemProperties = System.properties
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'hub-content-feed.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('hub-content-feed.jar').delete()
}
